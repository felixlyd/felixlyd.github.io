{"/about/":{"data":{"":"Hextra 是一款简洁、快速、灵活的主题，适用于构建现代化静态站点。Hextra 特别适用于文档网站，但也可用于构建博客、个人网站等各种类型的网站。\nHugo 和 Jekyll 类似，是一个静态网站生成器。但与其他生成器不同，Hugo 只有单个可执行文件，这使得它可以轻松地在各种平台上安装和运行。Hugo 的运行速度非常快且可靠性高，能够在几毫秒内渲染数千页的网站。\nHextra 被设计为轻量级，具有最小化的内存占用。使用 Hextra 无需安装繁杂的依赖，比如 Node.js；相反，你只需要一个简单的 YAML 配置文件和 Markdown 内容。因此，我们可以专注于内容而非在配置环境上浪费精力。","鸣谢#鸣谢":"Hextra 的设计离不开这些项目的支持和其提供的灵感：\nHugo Tailwind CSS Heroicons Nextra Next.js "},"title":"关于"},"/docs-%E5%89%AF%E6%9C%AC/":{"data":{"":"👋 你好！欢迎来到 Hextra 文档！","hextra-是什么#Hextra 是什么？":"Hextra 是一款现代、快速且内置丰富功能的 [Hugo][hugo] 主题，它是用 [Tailwind CSS][tailwind-css] 构建的。该主题旨在创建美观的文档、博客和网站，提供了开箱即用的功能和灵活性以满足各种需求。","功能特点#功能特点":" 优美的设计 - 受到 Nextra 的启发，Hextra 利用 Tailwind CSS 提供了一种现代设计，使您的网站看起来出色。 响应式布局和深色模式 - 无论是在移动设备、平板还是桌面上，都表现出色。同时支持深色模式以适应各种光线条件。 快速和轻量级 - 由 Hugo 驱动，一个轻量级且超快的静态网站生成器，封装在一个单一的二进制文件中，Hextra 保持其占用极小。使用它不需要 Javascript 或 Node.js。 全文搜索 - 内置的离线全文搜索由 FlexSearch 提供支持，无需额外配置。 功能全面 - 支持 Markdown、语法高亮、LaTeX 数学公式、图表以及 Shortcodes 元素以增强您的内容。目录、面包屑、分页、侧边栏导航等都会自动生成。 多语言和 SEO 支持 - Hugo 的多语言模式轻松支持多语言网站。对于 SEO 标签、Open Graph 和 Twitter 卡片，也提供了开箱即用的支持。 ","接下来#接下来":"直接进入以下部分开始：\n入门指南学习如何使用 Hextra 创建网站 ","有问题或反馈#有问题或反馈？":" ❓ Hextra 仍在积极开发中。 有问题或反馈？请随时提出问题！ "},"title":"文档"},"/docs-%E5%89%AF%E6%9C%AC/advanced/":{"data":{"":"此部分提供了 Hextra 的一些高级配置。\n多语言 定制化 "},"title":"高级配置"},"/docs-%E5%89%AF%E6%9C%AC/advanced/comments/":{"data":{"":"Hextra supports adding comments system to your site. Currently giscus is supported.","giscus#giscus":"giscus is a comments system powered by GitHub Discussions. It is free and open source.\nTo enable giscus, you need to add the following to the site configuration file:\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003crepository\u003e repoId: \u003crepository ID\u003e category: \u003ccategory\u003e categoryId: \u003ccategory ID\u003e The giscus configurations can be constructed from the giscus.app website. More details can also be found there.\nComments can be enabled or disabled for a specific page in the page front matter:\ncontent/docs/about.md--- title: About comments: true --- "},"title":"Comments"},"/docs-%E5%89%AF%E6%9C%AC/advanced/customization/":{"data":{"":"Hextra 在 hugo.yaml 中提供了一些自定义选项来配置主题。 本页介绍了可用选项以及如何进一步自定义主题。","自定义-css#自定义 CSS":"要添加自定义 CSS，我们需要在站点中创建一个文件 assets/css/custom.css。Hextra 将自动加载该文件，比如自定义字体：\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } 主题色 主题色可以通过设置 --primary-hue 变量来自定义：\nassets/css/custom.css:root { --primary-hue: 100deg; } 代码高亮 代码高亮风格的详细信息可在 Chroma Styles Gallery 中找到。 可以使用以下命令生成样式表：\n$ hugo gen chromastyles --style=github 可将生成的样式添加到自定义 CSS 文件中以覆盖默认代码高亮样式。","自定义-script#自定义 Script":"你可以添加以下文件以自定义 script 添加到每页的 head 最后：\nlayouts/partials/custom/head-end.html ","自定义布局#自定义布局":"可以在站点的 layouts 目录中创建同名文件来覆盖主题的默认布局。 例如，要覆盖文档的 single.html 布局，在站点中创建文件 layouts/docs/single.html。\n如需或许更多信息，转至 Hugo Templates。","进一步定制-hextra#进一步定制 Hextra":"没有找到你想修改的东西？在 GitHub 上创建 Issues 或为 Hextra 贡献你的智慧！"},"title":"自定义"},"/docs-%E5%89%AF%E6%9C%AC/advanced/multi-language/":{"data":{"":"Hextra 支持使用 Hugo 的多语言模式 创建多语言的网站。","启用多语言支持#启用多语言支持":"为了使我们的网站支持多语言，我们需要告诉 Hugo 需要支持的语言。 在站点配置文件中添加：\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","按文件名管理翻译#按文件名管理翻译":"Hugo 支持按文件名管理翻译。例如，如果我们有一个英文文件 content/docs/_index.md，我们可以创建一个翻译为法语的文件 content/docs/_index.fr.md。\ncontent docs _index.md _index.fr.md _index.ja.md 注意：Hugo 还支持按内容目录管理翻译。","更多参考#更多参考":" Hugo Multilingual Mode Hugo Multilingual Part 1: Content translation Hugo Multilingual Part 2: Strings localization ","翻译字符串#翻译字符串":"要翻译其他地方的字符串，我们需要将翻译添加到相应的 i18n 文件中：\ni18n/fr.yamlreadMore: Lire la suite ","翻译菜单项#翻译菜单项":"要翻译导航栏中的菜单项，我们需要设置 identifier 字段：\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 "},"title":"多语言"},"/docs-%E5%89%AF%E6%9C%AC/getting-started.ja/":{"data":{"":"プロジェクトの紹介。"},"title":"はじめに"},"/docs-%E5%89%AF%E6%9C%AC/getting-started/":{"data":{"":"","作为新项目开始#作为新项目开始":"前提条件 在开始之前，请确保我们已经安装了 Hugo。 请参考 Hugo 的官方安装指南以获取更多详情。\nHugo 模块是管理 Hugo 主题的推荐方式。要使用 Hugo 模块，我们需要安装 Git 和 Go。\n初始化 Hugo 站点 $ hugo new site my-site --format=yaml 通过模块配置 Hextra 主题 # 初始化 Hugo 模块 $ cd my-site $ hugo mod init github.com/username/my-site # 添加 Hextra $ hugo mod get github.com/imfing/hextra 编辑 hugo.yaml 以启用 Hextra：\nmodule: imports: - path: github.com/imfing/hextra 创建你的第一个内容页 让我们为主页和文档页面创建一个新的内容页面：\n$ hugo new content/_index.md $ hugo new content/docs/_index.md 在本地预览站点 $ hugo server --buildDrafts --disableFastRender 瞧！你现在可以在 http://localhost:1313/ 看到你的新站点。","使用模板快速开始#使用模板快速开始":" imfing/hextra-starter-template\n通过使用上面的模板仓库，您将能够快速地开始。\n我们提供了一个 GitHub Actions 工作流，它可以帮助您自动构建并部署您的网站到 GitHub Pages，并免费托管。\n🌐 演示 ↗","接下来#接下来":"你可以探索以下部分来添加更多内容：\n目录结构 配置文件指南 Markdown "},"title":"快速开始"},"/docs-%E5%89%AF%E6%9C%AC/guide/":{"data":{"":"探索以下各节以学习如何使用 Hextra 编写内容：\n目录结构 配置 Markdown 代码高亮 LaTeX 公式 图表 短代码 "},"title":"指南"},"/docs-%E5%89%AF%E6%9C%AC/guide/configuration/":{"data":{"":"Hugo 从 Hugo 网站根目录下的 hugo.yaml 读取配置。 在配置文件中，您可以配置站点的所有选项。 你可以在 exampleSite/hugo.yaml 中找到此站点的配置文件作为开始。","侧边栏#侧边栏":"主侧边栏 主侧边栏是自动从 content 目录结构生成的。 有关更多详细信息，转至 目录结构。\n额外链接 侧边栏的额外链接在配置文件的 menu.sidebar 部分中配置：\nhugo.yamlmenu: sidebar: - name: More params: type: separator weight: 1 - name: \"About\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 ","右侧边栏#右侧边栏":"目录 目录是根据内容文件中的标题自动生成的，可以在 front matter 设置 toc：false 来禁用它。\ncontent/docs/guide/configuration.md--- title: Configuration toc: false --- 编辑此页链接 要配置编辑此页链接，我们可以在配置文件中设置 params.editURL.base：\nhugo.yamlparams: editURL: base: \"https://github.com/your-username/your-repo/edit/main\" 将为每个页面自动生成编辑链接。 如需为特定页面设置编辑链接，可以在页面的 front matter 中设置 params.editURL：\ncontent/docs/guide/configuration.md--- title: Configuration params: editURL: \"https://example.com/edit/this/page\" --- ","导航栏#导航栏":"菜单 右上角的菜单在配置文件的 menu.main 中配置：\nhugo.yamlmenu: main: - name: Documentation pageRef: /docs weight: 1 - name: Blog pageRef: /blog weight: 2 - name: About pageRef: /about weight: 3 - name: Search weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github 有几种不同类型的菜单项:\nLink to a page in the site with pageRef - name: Documentation pageRef: /docs Link to an external URL with url - name: GitHub url: \"https://github.com\" Search bar with type: search - name: Search params: type: search Icon - name: GitHub params: icon: github 这些菜单项可以通过设置 weight 进行排序。"},"title":"配置文件"},"/docs-%E5%89%AF%E6%9C%AC/guide/diagrams/":{"data":{"":"目前，Hextra 支持 Mermain 的图表。","mermaid#Mermaid":"Mermaid 是一个基于 JavaScript 的图表绘制工具，它的文本定义和 Markdown 类似，可在浏览器中动态创建图表。例如：流程图、序列图、饼图等。\n在 Hextra 中使用 Mermain 就像使用代码块一样简单：\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` 将呈现为：\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD;Sequence diagram：\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good!如需获取更多信息，转至 Mermaid Documentation。"},"title":"图表"},"/docs-%E5%89%AF%E6%9C%AC/guide/latex/":{"data":{"":"$\\KaTeX$ 用于呈现 LaTeX 数学表达式。可在 frontmatter 将 math 设置为 true 来启用。\nMarkdown--- title: \"My Page with LaTeX\" math: true --- 启用后，KaTeX 中的脚本，样式表和字体将自动包含在你的网站中。这样就可以在 Markdown 内容中使用 LaTeX 数学表达式。","化学表达式#化学表达式":"通过 mhchem 支持化学表达式。\n行内：$\\ce{H2O}$ 是水。\n独立段落：\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ $$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$","支持的功能#支持的功能":"有关支持的符号列表，转至 KaTeX 支持的公式。","示例#示例":"Markdown 内容支持行内和独立段落的 LaTeX 数学表达式。\n行内 page.mdThis $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline. This $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline.\n独立段落 page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ 将被渲染为：\n$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} , dt$$"},"title":"LaTeX 公式"},"/docs-%E5%89%AF%E6%9C%AC/guide/markdown/":{"data":{"":"Hugo 支持 Markdown 来书写内容，创建列表等。本页将向你展示一些最常见的 Markdown 语法示例。","markdown-示例#Markdown 示例":"文本样式 Style Syntax Example Output Bold **bold text** **bold text** bold text Italic *italicized text* `italicized text italicized text Strikethrough ~~strikethrough text~~ ~~strikethrough text~~ strikethrough text Subscript \u003csub\u003e\u003c/sub\u003e This is a \u003csub\u003esubscript\u003c/sub\u003e text This is a subscript text Superscript \u003csup\u003e\u003c/sup\u003e This is a \u003csup\u003esuperscript\u003c/sup\u003e text This is a superscript text 引用 带角标的块引用：\nDon’t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n表格 表格并非核心 Markdown 规范，但 Hugo 支持开箱即用的表格：\nName Age Bob 27 Alice 23 Markdown 表格中的内联 Italics Bold Code italics bold code 代码块 Syntax Highlighting 列表 有序列表 First item Second item Third item 无序列表 List item Another item And another item 嵌套列表 Fruit Apple Orange Banana Dairy Milk Cheese 图片 带有标题：\nUnsplash Landscape The above quote is excerpted from Rob Pike’s talk during Gopherfest, November 18, 2015. ↩︎","参考资料#参考资料":" Markdown Guide Markdown Cheatsheet Markdown Tutorial Markdown Reference ","配置#配置":"Hugo 使用 Goldmark 解析 Markdown。 Markdown 渲染可以在 hugo.yaml 中的 markup.goldmark 中配置。以下是Hextra的默认配置：\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false 如需了解更多选项，转至 Configure Markup。"},"title":"Markdown"},"/docs-%E5%89%AF%E6%9C%AC/guide/organize-files/":{"data":{"":"","侧边栏导航#侧边栏导航":"侧边栏导航是根据内容组织的字母顺序自动生成的。要手动配置侧边栏顺序，可以在 Markdown 文件的 frontmatter 中使用 weight 配置。\ncontent/docs/guide/_index.md--- title: Guide weight: 2 --- ℹ️ 建议侧边栏不要太深。如果内容太多，请考虑 将它们分成多个部分。 ","目录结构#目录结构":"默认情况下，Hugo 在 context 目录中搜索 Markdown 文件，目录的结构决定了网站的最终输出结构。 以示例网站为例：\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md 每个 _index.md 文件都是相应部分的索引页，其他 Markdown 文件则是常规页面。\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ ","配置内容目录#配置内容目录":"如果需要为的内容使用不同的目录，可以在站点配置文件中设置 contentDir 来实现。"},"title":"目录结构"},"/docs-%E5%89%AF%E6%9C%AC/guide/shortcodes/":{"data":{"":"Hugo 短代码 是你的内容文件中调用内置或自定义模板的简单片段。\nHextra 提供了一系列美观的短代码以增强你的内容。\n注意事项 卡片 文件树 图标 步骤 标签 "},"title":"短代码"},"/docs-%E5%89%AF%E6%9C%AC/guide/shortcodes/callout/":{"data":{"":"A built-in component to show important information to the reader.","example#Example":" 👾 A callout is a short piece of text intended to attract attention. ℹ️ A callout is a short piece of text intended to attract attention. ⚠️ A callout is a short piece of text intended to attract attention. 🚫 A callout is a short piece of text intended to attract attention. ","usage#Usage":"Default 🌐 Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c callout emoji=\"🌐\" \u003e}} Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c /callout \u003e}} Info ℹ️ Please visit GitHub to see the latest releases. {{\u003c callout type=\"info\" \u003e}} Please visit GitHub to see the latest releases. {{\u003c /callout \u003e}} Warning ⚠️ This API will be deprecated in the next version. {{\u003c callout type=\"warning\" \u003e}} A **callout** is a short piece of text intended to attract attention. {{\u003c /callout \u003e}} Error 🚫 Something went wrong and it’s going to explode. {{\u003c callout type=\"error\" \u003e}} Something went wrong and it's going to explode. {{\u003c /callout \u003e}} "},"title":"Callout"},"/docs-%E5%89%AF%E6%9C%AC/guide/shortcodes/cards/":{"data":{"":"","card-parameters#Card Parameters":" Parameter Description link URL (internal or external). title Title heading for the card. subtitle Subtitle heading (supports Markdown). icon Name of the icon. ","example#Example":" Callout No Icon Image CardUnsplash Landscape Local ImageRaw image under static directory. Local ImageImage under assets directory, processed by Hugo. ","image-card#Image Card":"Additionally, the card supports adding image and processing through these parameters:\nParameter Description image Specifies the image URL for the card. method Sets Hugo’s image processing method. options Configures Hugo’s image processing options. Card supports three kinds of images:\nRemote image: the full URL in the image parameter. Static image: use the relative path in Hugo’s static/ directory. Processed image: use the relative path in Hugo’s assets/ directory. Hextra auto-detects if image processing is needed during build and applies the options parameter or default settings (Resize, 800x, Quality 80, WebP Format). It currently supports these method: Resize, Fit, Fill and Crop.\nFor more on Hugo’s built in image processing commands, methods, and options see their Image Processing Documentation.","usage#Usage":"{{\u003c/* cards */\u003e}} {{\u003c/* card link=\"../callout\" title=\"Callout\" icon=\"warning\" */\u003e}} {{\u003c/* card link=\"/\" title=\"No Icon\" */\u003e}} {{\u003c/* /cards */\u003e}} {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"/\" title=\"Image Card\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplash Landscape\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"Raw image under static directory.\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"images/space.jpg\" subtitle=\"Image under assets directory, processed by Hugo.\" method=\"Resize\" options=\"600x q80 webp\" */\u003e}} {{\u003c/* /cards */\u003e}} "},"title":"Cards"},"/docs-%E5%89%AF%E6%9C%AC/guide/shortcodes/details/":{"data":{"":"A built-in component to display a collapsible content.","example#Example":" Details This is the content of the details.\nMarkdown is supported.\nClick me to reveal This will be hidden by default. ","usage#Usage":"{{%/* details title=\"Details\" */%}} This is the content of the details. Markdown is **supported**. {{%/* /details */%}} {{%/* details title=\"Click me to reveal\" closed=\"true\" */%}} This will be hidden by default. {{%/* /details */%}} "},"title":"Details"},"/docs-%E5%89%AF%E6%9C%AC/guide/shortcodes/filetree/":{"data":{"":"","example#Example":" content _index.md docs _index.md introduction.md introduction.fr.md hugo.toml ","usage#Usage":"Markdown{{\u003c/* filetree/container */\u003e}} {{\u003c/* filetree/folder name=\"content\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/folder name=\"docs\" state=\"closed\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.fr.md\" */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* filetree/file name=\"hugo.toml\" */\u003e}} {{\u003c/* /filetree/container */\u003e}} "},"title":"FileTree"},"/docs-%E5%89%AF%E6%9C%AC/guide/shortcodes/icon/":{"data":{"":"To use this shortcode inline, inline shortcode needs to be enabled in the config:\nhugo.yamlenableInlineShortcodes: true List of available icons can be found in data/icons.yaml.","example#Example":" ","usage#Usage":"{{\u003c/* icon \"github\" */\u003e}} Heroicons v1 outline icons are available out of the box.\nHow to add your own icons Create data/icons.yaml file, then add your own SVG icons in the following format:\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e It then can be used in the shortcode like this:\n{{\u003c/* icon \"your-icon\" */\u003e}} {{\u003c/* card icon=\"your-icon\" */\u003e}} Tip: Iconify Design is a great place to find SVG icons for your site."},"title":"Icon"},"/docs-%E5%89%AF%E6%9C%AC/guide/shortcodes/steps/":{"data":{"":"A built-in component to display a series of steps.","example#Example":" Step 1 This is the first step.\nStep 2 This is the second step.\nStep 3 This is the third step.","usage#Usage":"Put Markdown h3 header within steps shortcode.\n{{%/* steps */%}} ### Step 1 This is the first step. ### Step 2 This is the second step. {{%/* /steps */%}} "},"title":"Steps"},"/docs-%E5%89%AF%E6%9C%AC/guide/shortcodes/tabs/":{"data":{"":"","example#Example":"JSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. ","usage#Usage":"Default {{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} Specify Selected Index Use defaultIndex property to specify the selected tab. The index starts from 0.\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} The YAML tab will be selected by default.\nJSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. Use Markdown Markdown syntax including code block is also supported:\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}} ```json { \"hello\": \"world\" } ``` {{\u003c /tab \u003e}} ... add other tabs similarly {{\u003c /tabs \u003e}} JSONYAMLTOML { \"hello\": \"world\" } hello: world hello = \"world\" "},"title":"Tabs"},"/docs-%E5%89%AF%E6%9C%AC/guide/syntax-highlighting/":{"data":{"":"Hugo 使用 Chroma，一种纯 Golang 实现的代码高亮渲染器。 建议对 Markdown 内容中的代码块使用反引号，例如：\nMarkdown```python def say_hello(): print(\"Hello!\") ``` 将呈现为：\ndef say_hello(): print(\"Hello!\") ","支持的编程语言#支持的编程语言":"如需了解支持的编程语言，转至 Chroma’s documentation。","特性#特性":"文件名 要向代码块添加文件名或标题，请设置 filename：\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") 行号 如需设置行号，将 linenos 设置为 table，并将 linenostart 设置为起始行号：\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") 高亮行 显示高亮行，设置 hl_lines 为行号：\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() 复制按钮 默认情况下，代码块复制按钮已自动启用。"},"title":"代码高亮"},"/docs/":{"data":{"":"👋 你好！欢迎来到 Hextra 文档！","hextra-是什么#Hextra 是什么？":"Hextra 是一款现代、快速且内置丰富功能的 [Hugo][hugo] 主题，它是用 [Tailwind CSS][tailwind-css] 构建的。该主题旨在创建美观的文档、博客和网站，提供了开箱即用的功能和灵活性以满足各种需求。","功能特点#功能特点":" 优美的设计 - 受到 Nextra 的启发，Hextra 利用 Tailwind CSS 提供了一种现代设计，使您的网站看起来出色。 响应式布局和深色模式 - 无论是在移动设备、平板还是桌面上，都表现出色。同时支持深色模式以适应各种光线条件。 快速和轻量级 - 由 Hugo 驱动，一个轻量级且超快的静态网站生成器，封装在一个单一的二进制文件中，Hextra 保持其占用极小。使用它不需要 Javascript 或 Node.js。 全文搜索 - 内置的离线全文搜索由 FlexSearch 提供支持，无需额外配置。 功能全面 - 支持 Markdown、语法高亮、LaTeX 数学公式、图表以及 Shortcodes 元素以增强您的内容。目录、面包屑、分页、侧边栏导航等都会自动生成。 多语言和 SEO 支持 - Hugo 的多语言模式轻松支持多语言网站。对于 SEO 标签、Open Graph 和 Twitter 卡片，也提供了开箱即用的支持。 ","接下来#接下来":"直接进入以下部分开始：\n入门指南学习如何使用 Hextra 创建网站 ","有问题或反馈#有问题或反馈？":" ❓ Hextra 仍在积极开发中。 有问题或反馈？请随时提出问题！ "},"title":"文档"},"/docs/advanced/":{"data":{"":"此部分提供了 Hextra 的一些高级配置。\n多语言 定制化 "},"title":"高级配置"},"/docs/advanced/comments/":{"data":{"":"Hextra supports adding comments system to your site. Currently giscus is supported.","giscus#giscus":"giscus is a comments system powered by GitHub Discussions. It is free and open source.\nTo enable giscus, you need to add the following to the site configuration file:\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003crepository\u003e repoId: \u003crepository ID\u003e category: \u003ccategory\u003e categoryId: \u003ccategory ID\u003e The giscus configurations can be constructed from the giscus.app website. More details can also be found there.\nComments can be enabled or disabled for a specific page in the page front matter:\ncontent/docs/about.md--- title: About comments: true --- "},"title":"Comments"},"/docs/advanced/customization/":{"data":{"":"Hextra 在 hugo.yaml 中提供了一些自定义选项来配置主题。 本页介绍了可用选项以及如何进一步自定义主题。","自定义-css#自定义 CSS":"要添加自定义 CSS，我们需要在站点中创建一个文件 assets/css/custom.css。Hextra 将自动加载该文件，比如自定义字体：\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } 主题色 主题色可以通过设置 --primary-hue 变量来自定义：\nassets/css/custom.css:root { --primary-hue: 100deg; } 代码高亮 代码高亮风格的详细信息可在 Chroma Styles Gallery 中找到。 可以使用以下命令生成样式表：\n$ hugo gen chromastyles --style=github 可将生成的样式添加到自定义 CSS 文件中以覆盖默认代码高亮样式。","自定义-script#自定义 Script":"你可以添加以下文件以自定义 script 添加到每页的 head 最后：\nlayouts/partials/custom/head-end.html ","自定义布局#自定义布局":"可以在站点的 layouts 目录中创建同名文件来覆盖主题的默认布局。 例如，要覆盖文档的 single.html 布局，在站点中创建文件 layouts/docs/single.html。\n如需或许更多信息，转至 Hugo Templates。","进一步定制-hextra#进一步定制 Hextra":"没有找到你想修改的东西？在 GitHub 上创建 Issues 或为 Hextra 贡献你的智慧！"},"title":"自定义"},"/docs/advanced/multi-language/":{"data":{"":"Hextra 支持使用 Hugo 的多语言模式 创建多语言的网站。","启用多语言支持#启用多语言支持":"为了使我们的网站支持多语言，我们需要告诉 Hugo 需要支持的语言。 在站点配置文件中添加：\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","按文件名管理翻译#按文件名管理翻译":"Hugo 支持按文件名管理翻译。例如，如果我们有一个英文文件 content/docs/_index.md，我们可以创建一个翻译为法语的文件 content/docs/_index.fr.md。\ncontent docs _index.md _index.fr.md _index.ja.md 注意：Hugo 还支持按内容目录管理翻译。","更多参考#更多参考":" Hugo Multilingual Mode Hugo Multilingual Part 1: Content translation Hugo Multilingual Part 2: Strings localization ","翻译字符串#翻译字符串":"要翻译其他地方的字符串，我们需要将翻译添加到相应的 i18n 文件中：\ni18n/fr.yamlreadMore: Lire la suite ","翻译菜单项#翻译菜单项":"要翻译导航栏中的菜单项，我们需要设置 identifier 字段：\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 "},"title":"多语言"},"/docs/getting-started.ja/":{"data":{"":"プロジェクトの紹介。"},"title":"はじめに"},"/docs/getting-started/":{"data":{"":"","作为新项目开始#作为新项目开始":"前提条件 在开始之前，请确保我们已经安装了 Hugo。 请参考 Hugo 的官方安装指南以获取更多详情。\nHugo 模块是管理 Hugo 主题的推荐方式。要使用 Hugo 模块，我们需要安装 Git 和 Go。\n初始化 Hugo 站点 $ hugo new site my-site --format=yaml 通过模块配置 Hextra 主题 # 初始化 Hugo 模块 $ cd my-site $ hugo mod init github.com/username/my-site # 添加 Hextra $ hugo mod get github.com/imfing/hextra 编辑 hugo.yaml 以启用 Hextra：\nmodule: imports: - path: github.com/imfing/hextra 创建你的第一个内容页 让我们为主页和文档页面创建一个新的内容页面：\n$ hugo new content/_index.md $ hugo new content/docs/_index.md 在本地预览站点 $ hugo server --buildDrafts --disableFastRender 瞧！你现在可以在 http://localhost:1313/ 看到你的新站点。","使用模板快速开始#使用模板快速开始":" imfing/hextra-starter-template\n通过使用上面的模板仓库，您将能够快速地开始。\n我们提供了一个 GitHub Actions 工作流，它可以帮助您自动构建并部署您的网站到 GitHub Pages，并免费托管。\n🌐 演示 ↗","接下来#接下来":"你可以探索以下部分来添加更多内容：\n目录结构 配置文件指南 Markdown "},"title":"快速开始"},"/docs/guide/":{"data":{"":"探索以下各节以学习如何使用 Hextra 编写内容：\n目录结构 配置 Markdown 代码高亮 LaTeX 公式 图表 短代码 "},"title":"指南"},"/docs/guide/configuration/":{"data":{"":"Hugo 从 Hugo 网站根目录下的 hugo.yaml 读取配置。 在配置文件中，您可以配置站点的所有选项。 你可以在 exampleSite/hugo.yaml 中找到此站点的配置文件作为开始。","侧边栏#侧边栏":"主侧边栏 主侧边栏是自动从 content 目录结构生成的。 有关更多详细信息，转至 目录结构。\n额外链接 侧边栏的额外链接在配置文件的 menu.sidebar 部分中配置：\nhugo.yamlmenu: sidebar: - name: More params: type: separator weight: 1 - name: \"About\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 ","右侧边栏#右侧边栏":"目录 目录是根据内容文件中的标题自动生成的，可以在 front matter 设置 toc：false 来禁用它。\ncontent/docs/guide/configuration.md--- title: Configuration toc: false --- 编辑此页链接 要配置编辑此页链接，我们可以在配置文件中设置 params.editURL.base：\nhugo.yamlparams: editURL: base: \"https://github.com/your-username/your-repo/edit/main\" 将为每个页面自动生成编辑链接。 如需为特定页面设置编辑链接，可以在页面的 front matter 中设置 params.editURL：\ncontent/docs/guide/configuration.md--- title: Configuration params: editURL: \"https://example.com/edit/this/page\" --- ","导航栏#导航栏":"菜单 右上角的菜单在配置文件的 menu.main 中配置：\nhugo.yamlmenu: main: - name: Documentation pageRef: /docs weight: 1 - name: Blog pageRef: /blog weight: 2 - name: About pageRef: /about weight: 3 - name: Search weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github 有几种不同类型的菜单项:\nLink to a page in the site with pageRef - name: Documentation pageRef: /docs Link to an external URL with url - name: GitHub url: \"https://github.com\" Search bar with type: search - name: Search params: type: search Icon - name: GitHub params: icon: github 这些菜单项可以通过设置 weight 进行排序。"},"title":"配置文件"},"/docs/guide/diagrams/":{"data":{"":"目前，Hextra 支持 Mermain 的图表。","mermaid#Mermaid":"Mermaid 是一个基于 JavaScript 的图表绘制工具，它的文本定义和 Markdown 类似，可在浏览器中动态创建图表。例如：流程图、序列图、饼图等。\n在 Hextra 中使用 Mermain 就像使用代码块一样简单：\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` 将呈现为：\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD;Sequence diagram：\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good!如需获取更多信息，转至 Mermaid Documentation。"},"title":"图表"},"/docs/guide/latex/":{"data":{"":"$\\KaTeX$ 用于呈现 LaTeX 数学表达式。可在 frontmatter 将 math 设置为 true 来启用。\nMarkdown--- title: \"My Page with LaTeX\" math: true --- 启用后，KaTeX 中的脚本，样式表和字体将自动包含在你的网站中。这样就可以在 Markdown 内容中使用 LaTeX 数学表达式。","化学表达式#化学表达式":"通过 mhchem 支持化学表达式。\n行内：$\\ce{H2O}$ 是水。\n独立段落：\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ $$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$","支持的功能#支持的功能":"有关支持的符号列表，转至 KaTeX 支持的公式。","示例#示例":"Markdown 内容支持行内和独立段落的 LaTeX 数学表达式。\n行内 page.mdThis $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline. This $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline.\n独立段落 page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ 将被渲染为：\n$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} , dt$$"},"title":"LaTeX 公式"},"/docs/guide/markdown/":{"data":{"":"Hugo 支持 Markdown 来书写内容，创建列表等。本页将向你展示一些最常见的 Markdown 语法示例。","markdown-示例#Markdown 示例":"文本样式 Style Syntax Example Output Bold **bold text** **bold text** bold text Italic *italicized text* `italicized text italicized text Strikethrough ~~strikethrough text~~ ~~strikethrough text~~ strikethrough text Subscript \u003csub\u003e\u003c/sub\u003e This is a \u003csub\u003esubscript\u003c/sub\u003e text This is a subscript text Superscript \u003csup\u003e\u003c/sup\u003e This is a \u003csup\u003esuperscript\u003c/sup\u003e text This is a superscript text 引用 带角标的块引用：\nDon’t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n表格 表格并非核心 Markdown 规范，但 Hugo 支持开箱即用的表格：\nName Age Bob 27 Alice 23 Markdown 表格中的内联 Italics Bold Code italics bold code 代码块 Syntax Highlighting 列表 有序列表 First item Second item Third item 无序列表 List item Another item And another item 嵌套列表 Fruit Apple Orange Banana Dairy Milk Cheese 图片 带有标题：\nUnsplash Landscape The above quote is excerpted from Rob Pike’s talk during Gopherfest, November 18, 2015. ↩︎","参考资料#参考资料":" Markdown Guide Markdown Cheatsheet Markdown Tutorial Markdown Reference ","配置#配置":"Hugo 使用 Goldmark 解析 Markdown。 Markdown 渲染可以在 hugo.yaml 中的 markup.goldmark 中配置。以下是Hextra的默认配置：\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false 如需了解更多选项，转至 Configure Markup。"},"title":"Markdown"},"/docs/guide/organize-files/":{"data":{"":"","侧边栏导航#侧边栏导航":"侧边栏导航是根据内容组织的字母顺序自动生成的。要手动配置侧边栏顺序，可以在 Markdown 文件的 frontmatter 中使用 weight 配置。\ncontent/docs/guide/_index.md--- title: Guide weight: 2 --- ℹ️ 建议侧边栏不要太深。如果内容太多，请考虑 将它们分成多个部分。 ","目录结构#目录结构":"默认情况下，Hugo 在 context 目录中搜索 Markdown 文件，目录的结构决定了网站的最终输出结构。 以示例网站为例：\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md 每个 _index.md 文件都是相应部分的索引页，其他 Markdown 文件则是常规页面。\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ ","配置内容目录#配置内容目录":"如果需要为的内容使用不同的目录，可以在站点配置文件中设置 contentDir 来实现。"},"title":"目录结构"},"/docs/guide/shortcodes/":{"data":{"":"Hugo 短代码 是你的内容文件中调用内置或自定义模板的简单片段。\nHextra 提供了一系列美观的短代码以增强你的内容。\n注意事项 卡片 文件树 图标 步骤 标签 "},"title":"短代码"},"/docs/guide/shortcodes/callout/":{"data":{"":"A built-in component to show important information to the reader.","example#Example":" 👾 A callout is a short piece of text intended to attract attention. ℹ️ A callout is a short piece of text intended to attract attention. ⚠️ A callout is a short piece of text intended to attract attention. 🚫 A callout is a short piece of text intended to attract attention. ","usage#Usage":"Default 🌐 Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c callout emoji=\"🌐\" \u003e}} Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c /callout \u003e}} Info ℹ️ Please visit GitHub to see the latest releases. {{\u003c callout type=\"info\" \u003e}} Please visit GitHub to see the latest releases. {{\u003c /callout \u003e}} Warning ⚠️ This API will be deprecated in the next version. {{\u003c callout type=\"warning\" \u003e}} A **callout** is a short piece of text intended to attract attention. {{\u003c /callout \u003e}} Error 🚫 Something went wrong and it’s going to explode. {{\u003c callout type=\"error\" \u003e}} Something went wrong and it's going to explode. {{\u003c /callout \u003e}} "},"title":"Callout"},"/docs/guide/shortcodes/cards/":{"data":{"":"","card-parameters#Card Parameters":" Parameter Description link URL (internal or external). title Title heading for the card. subtitle Subtitle heading (supports Markdown). icon Name of the icon. ","example#Example":" Callout No Icon Image CardUnsplash Landscape Local ImageRaw image under static directory. Local ImageImage under assets directory, processed by Hugo. ","image-card#Image Card":"Additionally, the card supports adding image and processing through these parameters:\nParameter Description image Specifies the image URL for the card. method Sets Hugo’s image processing method. options Configures Hugo’s image processing options. Card supports three kinds of images:\nRemote image: the full URL in the image parameter. Static image: use the relative path in Hugo’s static/ directory. Processed image: use the relative path in Hugo’s assets/ directory. Hextra auto-detects if image processing is needed during build and applies the options parameter or default settings (Resize, 800x, Quality 80, WebP Format). It currently supports these method: Resize, Fit, Fill and Crop.\nFor more on Hugo’s built in image processing commands, methods, and options see their Image Processing Documentation.","usage#Usage":"{{\u003c/* cards */\u003e}} {{\u003c/* card link=\"../callout\" title=\"Callout\" icon=\"warning\" */\u003e}} {{\u003c/* card link=\"/\" title=\"No Icon\" */\u003e}} {{\u003c/* /cards */\u003e}} {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"/\" title=\"Image Card\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplash Landscape\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"Raw image under static directory.\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"images/space.jpg\" subtitle=\"Image under assets directory, processed by Hugo.\" method=\"Resize\" options=\"600x q80 webp\" */\u003e}} {{\u003c/* /cards */\u003e}} "},"title":"Cards"},"/docs/guide/shortcodes/details/":{"data":{"":"A built-in component to display a collapsible content.","example#Example":" Details This is the content of the details.\nMarkdown is supported.\nClick me to reveal This will be hidden by default. ","usage#Usage":"{{%/* details title=\"Details\" */%}} This is the content of the details. Markdown is **supported**. {{%/* /details */%}} {{%/* details title=\"Click me to reveal\" closed=\"true\" */%}} This will be hidden by default. {{%/* /details */%}} "},"title":"Details"},"/docs/guide/shortcodes/filetree/":{"data":{"":"","example#Example":" content _index.md docs _index.md introduction.md introduction.fr.md hugo.toml ","usage#Usage":"Markdown{{\u003c/* filetree/container */\u003e}} {{\u003c/* filetree/folder name=\"content\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/folder name=\"docs\" state=\"closed\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.fr.md\" */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* filetree/file name=\"hugo.toml\" */\u003e}} {{\u003c/* /filetree/container */\u003e}} "},"title":"FileTree"},"/docs/guide/shortcodes/icon/":{"data":{"":"To use this shortcode inline, inline shortcode needs to be enabled in the config:\nhugo.yamlenableInlineShortcodes: true List of available icons can be found in data/icons.yaml.","example#Example":" ","usage#Usage":"{{\u003c/* icon \"github\" */\u003e}} Heroicons v1 outline icons are available out of the box.\nHow to add your own icons Create data/icons.yaml file, then add your own SVG icons in the following format:\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e It then can be used in the shortcode like this:\n{{\u003c/* icon \"your-icon\" */\u003e}} {{\u003c/* card icon=\"your-icon\" */\u003e}} Tip: Iconify Design is a great place to find SVG icons for your site."},"title":"Icon"},"/docs/guide/shortcodes/steps/":{"data":{"":"A built-in component to display a series of steps.","example#Example":" Step 1 This is the first step.\nStep 2 This is the second step.\nStep 3 This is the third step.","usage#Usage":"Put Markdown h3 header within steps shortcode.\n{{%/* steps */%}} ### Step 1 This is the first step. ### Step 2 This is the second step. {{%/* /steps */%}} "},"title":"Steps"},"/docs/guide/shortcodes/tabs/":{"data":{"":"","example#Example":"JSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. ","usage#Usage":"Default {{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} Specify Selected Index Use defaultIndex property to specify the selected tab. The index starts from 0.\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} The YAML tab will be selected by default.\nJSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. Use Markdown Markdown syntax including code block is also supported:\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}} ```json { \"hello\": \"world\" } ``` {{\u003c /tab \u003e}} ... add other tabs similarly {{\u003c /tabs \u003e}} JSONYAMLTOML { \"hello\": \"world\" } hello: world hello = \"world\" "},"title":"Tabs"},"/docs/guide/syntax-highlighting/":{"data":{"":"Hugo 使用 Chroma，一种纯 Golang 实现的代码高亮渲染器。 建议对 Markdown 内容中的代码块使用反引号，例如：\nMarkdown```python def say_hello(): print(\"Hello!\") ``` 将呈现为：\ndef say_hello(): print(\"Hello!\") ","支持的编程语言#支持的编程语言":"如需了解支持的编程语言，转至 Chroma’s documentation。","特性#特性":"文件名 要向代码块添加文件名或标题，请设置 filename：\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") 行号 如需设置行号，将 linenos 设置为 table，并将 linenostart 设置为起始行号：\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") 高亮行 显示高亮行，设置 hl_lines 为行号：\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() 复制按钮 默认情况下，代码块复制按钮已自动启用。"},"title":"代码高亮"},"/showcase/":{"data":{"":" 由 Hextra 驱动的开源网站和项目。 Porter LutheranConfessions Hextra Starter Template "},"title":"项目展示"}}